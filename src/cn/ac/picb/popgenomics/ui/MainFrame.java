/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.ac.picb.popgenomics.ui;

import cn.ac.picb.popgenomics.api.Configure;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author young
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        initConfig();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        discMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        configMenuItem = new javax.swing.JMenuItem();
        loadConfMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        readDivideMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        alignMenuItem = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        samseMenuItem = new javax.swing.JMenuItem();
        sampeMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        svCallMenuItem = new javax.swing.JMenuItem();
        snpCallMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        s2bMenuItem = new javax.swing.JMenuItem();
        b2sMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        sortMenuItem = new javax.swing.JMenuItem();
        rmdupMenuItem = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PopGenomics Data Processing Client");
        setPreferredSize(new java.awt.Dimension(1280, 800));

        out.setEditable(false);
        out.setColumns(20);
        out.setRows(5);
        jScrollPane1.setViewportView(out);

        jMenu1.setText("File");

        loginMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loginMenuItem.setText("Login");
        loginMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loginMenuItem);

        discMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        discMenuItem.setText("Disconnect");
        discMenuItem.setEnabled(false);
        discMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(discMenuItem);
        jMenu1.add(jSeparator1);

        configMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        configMenuItem.setText("Configuration");
        configMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(configMenuItem);

        loadConfMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        loadConfMenuItem.setText("Load Configuration File");
        loadConfMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadConfMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadConfMenuItem);
        jMenu1.add(jSeparator3);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Quit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Mapping");
        jMenu2.setEnabled(false);

        readDivideMenuItem.setText("Dividing Reads");
        readDivideMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readDivideMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(readDivideMenuItem);
        jMenu2.add(jSeparator2);

        alignMenuItem.setText("Alignment");
        alignMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alignMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(alignMenuItem);

        jMenu7.setText("Sam File Generation");

        samseMenuItem.setText("Single End Reads");
        samseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samseMenuItemActionPerformed(evt);
            }
        });
        jMenu7.add(samseMenuItem);

        sampeMenuItem.setText("Paired End Reads");
        sampeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sampeMenuItemActionPerformed(evt);
            }
        });
        jMenu7.add(sampeMenuItem);

        jMenu2.add(jMenu7);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Calling");
        jMenu3.setEnabled(false);

        svCallMenuItem.setText("SV/CNV Calling");
        svCallMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                svCallMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(svCallMenuItem);

        snpCallMenuItem.setText("SNP/Indel Calling");
        snpCallMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snpCallMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(snpCallMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Converting");
        jMenu4.setEnabled(false);

        s2bMenuItem.setText("Sam to Bam");
        s2bMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s2bMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(s2bMenuItem);

        b2sMenuItem.setText("Bam to Sam");
        b2sMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2sMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(b2sMenuItem);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Refinement");
        jMenu5.setEnabled(false);

        sortMenuItem.setText("Sort");
        sortMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(sortMenuItem);

        rmdupMenuItem.setText("Remove Duplicate");
        rmdupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmdupMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(rmdupMenuItem);

        jMenuBar1.add(jMenu5);

        jMenu8.setText("Genotyping");

        jMenuItem1.setText("SNP Calling");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem1);

        jMenuBar1.add(jMenu8);

        jMenu6.setText("Help");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuItemActionPerformed(evt);
            }
        });
        jMenu6.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu6.add(aboutMenuItem);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (session != null) {
            session.disconnect();
            session = null;
        }
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void svCallMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_svCallMenuItemActionPerformed
        new SVCallForm(this, true).setVisible(true);
    }//GEN-LAST:event_svCallMenuItemActionPerformed

    private void loginMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginMenuItemActionPerformed
        if (session == null || !session.isConnected()) {
            LoginDialog login = new LoginDialog(this, true);
            login.setVisible(true);
            //System.out.println(login.getSession().toString());
            this.session = login.getSession();
        } else {
            discMenuItem.setEnabled(true);
            JOptionPane.showMessageDialog(this, "You have already login to " + session.getHost(), "", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_loginMenuItemActionPerformed

    private void discMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discMenuItemActionPerformed
        if (session != null && session.isConnected()) {
            session.disconnect();
        }
        session = null;
        discMenuItem.setEnabled(false);
        this.repaint();

    }//GEN-LAST:event_discMenuItemActionPerformed

    private void configMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configMenuItemActionPerformed
        ConfigForm cf = new ConfigForm(this, true);
        cf.setVisible(true);
    }//GEN-LAST:event_configMenuItemActionPerformed

    private void readDivideMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readDivideMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
        new DivReadsForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_readDivideMenuItemActionPerformed

    private void samseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samseMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new SamseDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_samseMenuItemActionPerformed

    private void sampeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sampeMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new SampeDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_sampeMenuItemActionPerformed

    private void snpCallMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snpCallMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new SNPCallForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_snpCallMenuItemActionPerformed

    private void s2bMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s2bMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new ConvertForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_s2bMenuItemActionPerformed

    private void b2sMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2sMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new ConvertForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_b2sMenuItemActionPerformed

    private void sortMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new sortForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_sortMenuItemActionPerformed

    private void rmdupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmdupMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new rmDupForm(this, true).setVisible(true);
        }
    }//GEN-LAST:event_rmdupMenuItemActionPerformed

    private void helpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuItemActionPerformed
        new HelpForm(this).setVisible(true);
    }//GEN-LAST:event_helpMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        new AboutForm(this).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void loadConfMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadConfMenuItemActionPerformed
        JFileChooser jfc = new JFileChooser(System.getProperty("user.dir"));
        int retVal = jfc.showOpenDialog(null);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            File confFile = jfc.getSelectedFile();
            loadConfig(confFile);
        }
    }//GEN-LAST:event_loadConfMenuItemActionPerformed

    private void alignMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alignMenuItemActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new AlignDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_alignMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if(this.session==null || !this.session.isConnected()){
            int retVal = loginAlert();
            if(retVal==JOptionPane.OK_OPTION)
                loginMenuItemActionPerformed(evt);
            else 
                return;
        }else{
            new aptCallDialog(this, true).setVisible(true);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public Session getSession() {
        return this.session;
    }

    public void initConfig() {
        File proFile = new File(".properties.xml");//default configuration file
        if (proFile.exists()) {
            try {
                Properties prop = new Properties();
                FileInputStream fis = new FileInputStream(proFile);
                prop.loadFromXML(fis);
                if (config == null) {
                    config = new Configure();
                }
                config.setDivRead(prop.getProperty("config.divRead"));
                config.setBwa(prop.getProperty("config.bwa"));
                config.setSamtools(prop.getProperty("config.samtools"));
                config.setaORRG(prop.getProperty("config.aORRG"));
                config.setMarkDup(prop.getProperty("config.markDup"));
                config.setgATK(prop.getProperty("config.gATK"));
                fis.close();
                enableMenus();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Environment configuration required for further operation!","Warning",JOptionPane.WARNING_MESSAGE);
        }
    }

    public void loadConfig(File confFile) {
        if (config == null) {
            config = new Configure();
        }

        try {
            Properties prop = new Properties();
            FileInputStream fis = new FileInputStream(confFile);
            prop.loadFromXML(fis);
            config.setDivRead(prop.getProperty("config.divRead"));
            config.setBwa(prop.getProperty("config.bwa"));
            config.setSamtools(prop.getProperty("config.samtools"));
            config.setaORRG(prop.getProperty("config.aORRG"));
            config.setMarkDup(prop.getProperty("config.markDup"));
            config.setgATK(prop.getProperty("config.gATK"));
            fis.close();
            enableMenus();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public Configure getConfig() {
        return this.config;
    }
    
    public void setConfig(Configure config){
        this.config = config;
    }
    public void enableMenus(){
        jMenu2.setEnabled(true);
        jMenu3.setEnabled(true);
        jMenu4.setEnabled(true);
        jMenu5.setEnabled(true);
    }

    public int loginAlert(){
        int option =  JOptionPane.showConfirmDialog(this, "You'd better connect to server before performing further operation","Warning",JOptionPane.WARNING_MESSAGE);
        return option;
    }
    
    public void submit(Session session, String cmd){
        try{ChannelExec channel =(ChannelExec) session.openChannel("exec");
            channel.setCommand(cmd);
            channel.setInputStream(null);
            channel.setErrStream(System.err);
            InputStream in =channel.getInputStream();
            channel.connect();
            //System.out.println(channel.isConnected());
            byte[] buff = new byte[1024];
            while(true){
            while(in.available()>0){
                int i = in.read(buff,0,1024);
                if(i<0)
                    break;
                out.append(new String(buff,0,i));
                System.out.println(new String(buff,0,i));
                //this.repaint();
            }
            if(channel.isClosed()){
                out.append("exit-status:  "+channel.getExitStatus());
                System.out.println("exit-status:  "+channel.getExitStatus());
                break;
            }try{Thread.sleep(1000);}catch(Exception ee){};
            channel.disconnect();
            //session.disconnect();
            }
        } catch (JSchException ex) {
            Logger.getLogger(TestDialog.class.getName()).log(Level.SEVERE, null, ex);
        }catch(IOException e){
            e.printStackTrace();
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem alignMenuItem;
    private javax.swing.JMenuItem b2sMenuItem;
    private javax.swing.JMenuItem configMenuItem;
    private javax.swing.JMenuItem discMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JMenuItem loadConfMenuItem;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JTextArea out;
    private javax.swing.JMenuItem readDivideMenuItem;
    private javax.swing.JMenuItem rmdupMenuItem;
    private javax.swing.JMenuItem s2bMenuItem;
    private javax.swing.JMenuItem sampeMenuItem;
    private javax.swing.JMenuItem samseMenuItem;
    private javax.swing.JMenuItem snpCallMenuItem;
    private javax.swing.JMenuItem sortMenuItem;
    private javax.swing.JMenuItem svCallMenuItem;
    // End of variables declaration//GEN-END:variables
    private Session session;
    private Configure config;
}
